{"version":3,"sources":["components/AddCity.jsx","components/WeatherCard.jsx","components/ForecastContainer.jsx","App.js","reportWebVitals.js","index.js"],"names":["AddCity","updateQuery","useState","city","setCity","className","onSubmit","e","preventDefault","alert","type","placeholder","value","onChange","target","WeatherCard","weatherApi","api","weatherIcon","weather","icon","name","src","alt","main","temp","temp_min","temp_max","ForecastBox","forecastApi","console","log","replace","findMinTemp","day","minTempArray","timeStampArray","forEach","push","dt_txt","slice","length","indexOfMinTemp","indexOf","Math","min","findMaxTemp","maxTempArray","indexOfMaxTemp","max","forecast","data","list","dayArrayInit","map","dayArray","dayObject","date_key","minTemp","maxTemp","date","description","dayParser","JSON","stringify","apiKey","App","setWeather","setForecast","weatherApiCall","a","queryString","fetch","response","json","forecastApiCall","event","ForecastContainer","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.bb11851c.chunk.js","sourcesContent":["import React, { useState} from 'react';\n\nfunction AddCity( {updateQuery }) {\n    const [city, setCity] = useState('')\n\n    const onSubmit = (e) => {\n\n        e.preventDefault()\n\n        if(!city) {\n            alert('please add a city')\n            return\n        }\n\n        updateQuery(city)\n\n        setCity('')\n    }\n\n  return (\n    <form className=\"add-form\" onSubmit = {onSubmit}>\n      <div className=\"form-control\">\n        <label>City</label>\n        <input type=\"city\" placeholder=\"Enter City\" \n        value = {city}\n        onChange ={e => setCity(e.target.value)}\n        />\n      </div>\n    </form>\n  );\n}\n\nexport default AddCity;\n","function WeatherCard( weatherApi ) {\n  const api = weatherApi\n  var weatherIcon = \"\"  \n  if(api.weather ===\"\"){\n    return<div></div> \n  }else{\n    weatherIcon = `https://openweathermap.org/img/w/${api.weather.weather[0].icon}.png` \n    return <div className=\"weather\">   \n    <h1>City: {api.weather.name}</h1>\n   <img src = {weatherIcon} alt = {api.weather.name} />\n   <h3>Current: {api.weather.main.temp}</h3>\n   <h3>Min Temp: {api.weather.main.temp_min}</h3>\n   <h3>Max Temp: {api.weather.main.temp_max}</h3>\n   <br></br>\n </div>\n  }\n} \nexport default WeatherCard;\n","import React from 'react';\nimport ForecastCard from '../components/ForecastCard';\n\nfunction ForecastBox(forecastApi) {\n\n    var someStr = 'He said \"Hello, my name is Foo\"';\n    console.log(someStr.replace(/['\"]+/g, ''));\n\n\nconst dayArrayInit = () => {\n    const data = forecastApi.forecast.list;\n    const day1 = data.slice(0, 6);\n    const day2 = data.slice(7, 14);\n    const day3 = data.slice(15, 22);\n    const day4 = data.slice(23, 30);\n    const day5 = data.slice(31, 38);\n    const forecastArray = [day1, day2, day3, day4, day5];\n    return forecastArray;\n}\n\n\nconst dayParser = (dayArray) => {\n\n    const dayObject = {}\n    dayObject.date_key = dayArray[0].dt_txt \n    dayObject.minTemp = findMinTemp(dayArray)\n    dayObject.maxTemp = findMaxTemp(dayArray)\n    dayObject.date =  dayArray[0].dt_txt.slice(0, dayArray[0].dt_txt.length/2+2) \n    dayObject.icon = `https://openweathermap.org/img/w/${dayArray[0].weather[0].icon}.png` \n    dayObject.description = dayArray[0].weather[0].description\n    return dayObject\n} \n\n  const findMinTemp = (day) => {\n    let minTempArray = [];\n    let timeStampArray = [];\n    day.forEach((day) => minTempArray.push(day.main.temp_min));\n    day.forEach((day) => timeStampArray.push(day.dt_txt.slice(day.dt_txt.length/2 +2, day.dt_txt.length-3)));\n    var indexOfMinTemp = minTempArray.indexOf(Math.min(...minTempArray));\n    const minTemp = {\n      \" min temp \": `${minTempArray[indexOfMinTemp]} °C`,\n      \" at \": timeStampArray[indexOfMinTemp],\n    };\n    return minTemp;\n  };\n\n    const findMaxTemp = day => {\n    var maxTempArray = []\n    var timeStampArray = []\n    day.forEach(day => maxTempArray.push(day.main.temp_max))\n    day.forEach(day => timeStampArray.push(day.dt_txt.slice(day.dt_txt.length/2 +2, day.dt_txt.length-3)));\n    var indexOfMaxTemp = maxTempArray.indexOf(Math.max(...maxTempArray))\n    const maxTemp = {\n      \"max temp \" : `${maxTempArray[indexOfMaxTemp]} °C`,\n      \" at\" : `${timeStampArray[indexOfMaxTemp]}`\n    }\n    return maxTemp\n  }\n\n  if (forecastApi.forecast !== '') {\n    const dayArray = dayArrayInit(forecastApi)\n    const dayObjectArray = dayArray.map(day => dayParser(day))\n    const forecast = dayObjectArray.map((day) => \n    <div key = {day.date_key}>\n        <ul>\n            <img src = {day.icon} alt = {day.date}></img>\n            <h3>{day.date}</h3>\n            <p>{JSON.stringify(day.minTemp).replace(/[:{}'\"]+/g, '')}</p>\n            <p>{JSON.stringify(day.maxTemp).replace(/[:{}'\"]+/g, '')}</p>\n            <p>{day.description}</p>\n            <br></br>\n        </ul>\n    </div>\n    )\n\n    return (\n      <div className = \"container\">\n          {/* <h1>{dayObjectArray[0].date}</h1> */}\n            {forecast}\n            {/* <ForecastCard dayObjectArray = {dayObjectArray}/> */}\n      </div>\n    );\n  } else {\n    return <div>GoodBye World</div>;\n  }\n}\n\nexport default ForecastBox;\n","import AddCity from './components/AddCity';\nimport React, { useState, } from 'react';\nimport WeatherCard from './components/WeatherCard';\nimport ForecastContainer from './components/ForecastContainer'\nconst apiKey = '4915deb164cf151c9e3b329f1c2270a7'\n\nfunction App() {\n  const [weather, setWeather] = useState('')\n  const [forecast, setForecast] = useState('')\n  // const [name, setName] = useState('')\n  // const [icon, setIcon] = useState('')\n\n  // const getWetherAPI = async (city) => {\n  //   let weatherAPI = await weatherApiCall(city)\n  //   return weatherAPI\n  //   // console.log(api.name, \"from api\")\n  //   // setName(api.name)\n  //   // setIcon(`https://openweathermap.org/img/w/${api.weather[0].icon}.png`)\n  // }\n\n  const weatherApiCall = async (city) => {\n    var queryString = `https://api.openweathermap.org/data/2.5/weather?q=${city}&units=metric&appid=${apiKey} `\n    const response = await fetch(\n      queryString\n    )\n    const data = await response.json()\n    return data\n  }\n\n  const forecastApiCall = async (city) => {\n    var queryString = `https://api.openweathermap.org/data/2.5/forecast?q=${city}&units=metric&appid=${apiKey} `\n    const response = await fetch(\n      queryString\n    )\n    const data = await response.json()\n    return data\n  }\n    \n  const updateQuery = async (event) => {\n    let weatherApi = await weatherApiCall(event)\n    let forecastApi = await forecastApiCall(event)\n    setWeather(weatherApi)\n    setForecast(forecastApi)\n}\n\n\n  return (\n    <div className=\"App\">\n      <AddCity updateQuery= {updateQuery}/>\n      \n      <WeatherCard weather= {weather}/>\n      <ForecastContainer forecast= {forecast}/>\n    </div>\n  );\n}\n\nexport default App;\n\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(<App />, document.getElementById('root'))\nreportWebVitals()\n"],"sourceRoot":""}